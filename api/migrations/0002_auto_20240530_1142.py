# Generated by Django 5.0.6 on 2024-05-30 09:42

from django.db import migrations
from .models import Tile


def create_tiles_for_world(world, grid_size):
    # Créer les tuiles
    tiles = {}
    for x in range(grid_size):
        for y in range(grid_size):
            tile = Tile.objects.create(link_world=world, posX=x, posY=y)
            tiles[(x, y)] = tile

    # Connect the tiles horizontally and vertically
    for x in range(grid_size):
        for y in range(grid_size):
            tile = tiles[(x, y)]
            if x < grid_size - 1:  # Connect to the east if not the last column
                tile.east_door = tiles[(x + 1, y)]
            if y < grid_size - 1:  # Connect to the south if not the last row
                tile.south_door = tiles[(x, y + 1)]
            if x > 0:  # Connect to the west if not the first column
                tile.west_door = tiles[(x - 1, y)]
            if y > 0:  # Connect to the north if not the first row
                tile.north_door = tiles[(x, y - 1)]
            tile.save()


def add_initial_data(apps, schema_editor):
    World = apps.get_model('api', 'World')
    Tile = apps.get_model('api', 'Tile')
    Skill = apps.get_model('api', 'Skill')
    Monster = apps.get_model('api', 'Monster')
    Item = apps.get_model('api', 'Item')
    Shop = apps.get_model('api', 'Shop')
    ShopItem = apps.get_model('api', 'ShopItem')
    Chest = apps.get_model('api', 'Chest')
    ChestItem = apps.get_model('api', 'ChestItem')




    # Création de mondes
    world1 = World.objects.create(name='Land of the Ancients', description='A mysterious world filled with ancient magic.')
    world2 = World.objects.create(name='Dragon Kingdom', description='A kingdom where dragons rule supreme.')
    world3 = World.objects.create(name='Whispering Wilds', description='An untamed expanse of primal forests teeming with life and hidden dangers.')
    world4 = World.objects.create(name='Sunken City of Stars', description='A submerged metropolis, bathed in an ethereal glow, where forgotten technology hums beneath the waves.')


    # Créer des tuiles pour world1 avec une grille 3x3
    create_tiles_for_world(world1, 3)

    # Créer des tuiles pour world2 avec une grille 5x5
    create_tiles_for_world(world2, 5)

    # Créer des tuiles pour world3 avec une grille 10x10
    create_tiles_for_world(world3, 10)

    # Créer des tuiles pour world2 avec une grille 5x5
    create_tiles_for_world(world4, 4)

    skillwarrior1 = Skill.objects.create(name='Heroic Strike')
    skillwarrior1.description = skillwarrior1.generate_description()

    skillwarrior2 = Skill.objects.create(name='Shield Bash')
    skillwarrior2.description = skillwarrior2.generate_description()


    skillmage1 = Skill.objects.create(name='Fireball')
    skillmage1.description = skillmage1.generate_description()

    skillmage2 = Skill.objects.create(name='Ice Bolt')
    skillmage2.description = skillmage2.generate_description()


    skillrogue1 = Skill.objects.create(name='Backstab')
    skillrogue1.description = skillrogue1.generate_description()

    skillrogue2 = Skill.objects.create(name='Gouge')
    skillrogue2.description = skillrogue2.generate_description()


    skillhunter1 = Skill.objects.create(name='Aimed Shot')
    skillhunter1.description = skillhunter1.generate_description()

    skillhunter2 = Skill.objects.create(name='Multi-Shot')
    skillhunter2.description = skillhunter2.generate_description()

    skillpriest1 = Skill.objects.create(name='Heal')
    skillpriest1.description = skillpriest1.generate_description()

    skillpriest2 = Skill.objects.create(name='Holy Light')
    skillpriest2.description = skillpriest2.generate_description()


    skillwarrior1.save()
    skillwarrior2.save()
    skillmage1.save()
    skillmage2.save()
    skillrogue1.save()
    skillrogue2.save()
    skillhunter1.save()
    skillhunter2.save()
    skillpriest1.save()
    skillpriest2.save()



# Création de monstres avec tous les champs requis
    monster1 = Monster.objects.create(
        name='Skeleton Warrior',
        hp=1,
        tile=Tile.objects.get(link_world=world1, posX=1, posY=0),
        monster_type='Skeleton',
        attack=1,
        image='chemin/vers/image_skeleton_warrior.png'  # Remplacez par le chemin réel de l'image
    )

    monster2 = Monster.objects.create(
        name='Goblin Thief',
        hp=5,
        tile=Tile.objects.get(link_world=world1, posX=3, posY=0),
        monster_type='Goblin',
        attack=2,
        image='chemin/vers/image_goblin_thief.png'  # Remplacez par le chemin réel de l'image
    )

    # Création d'autres monstres
    monster3 = Monster.objects.create(
        name='Red Slime',
        hp=3,
        tile=Tile.objects.get(link_world=world1, posX=2, posY=1),
        monster_type='Slime',
        attack=1,
        image='chemin/vers/image_red_slime.png'  # Remplacez par le chemin réel de l'image
    )

    monster4 = Monster.objects.create(
        name='Fire Dragon',
        hp=100,
        tile=Tile.objects.get(link_world=world2, posX=4, posY=3),
        monster_type='Dragon',
        attack=30,
        image='chemin/vers/image_fire_dragon.png'  # Remplacez par le chemin réel de l'image
    ) 


    # Créez des objets (items)
    sword = Item.objects.create(
        name='Iron Sword',
        item_type='Weapon',
        description='A basic iron sword for beginners.',
        stats={'damage': 10},
        image='chemin/vers/image_iron_sword.png'  # Remplacez par le chemin réel de l'image
    )

    potion = Item.objects.create(
        name='Healing Potion',
        item_type='Potion',
        description='Restores health when consumed.',
        stats={'healing': 20},
        image='chemin/vers/image_heal_potion.png'  # Remplacez par le chemin réel de l'image
    )

    # Créez un magasin avec ces objets

    # Magasin de potions
    alchemy_shop = Shop.objects.create(
        name='Alchemy Shop',
        tile=Tile.objects.get(link_world=world1, posX=0, posY=2),
        image='chemin/vers/image_alchemy_shop.png'  # Remplacez par le chemin réel de l'image
    )
    potion_healing = Item.objects.get(name='Healing Potion')
    ShopItem.objects.create(shop=alchemy_shop, item=potion_healing, price=15)

    # Magasin d'équipement
    equipment_shop = Shop.objects.create(
        name='Starforge Armory',
        tile=Tile.objects.get(link_world=world2, posX=1, posY=3),
        image='chemin/vers/image_equipment_shop.png'  # Remplacez par le chemin réel de l'image
    )
    armor = Item.objects.create(
        name='Steel Armor',
        item_type='Equipment',
        description='Provides excellent protection in battle.',
        stats={'armor': 25},
        image='chemin/vers/image_steel_armor.png'  # Remplacez par le chemin réel de l'image
    )
    ShopItem.objects.create(shop=equipment_shop, item=armor, price=100)

    # Magasin de nourriture
    food_shop = Shop.objects.create(
        name='Enchanted Bakery',
        tile=Tile.objects.get(link_world=world3, posX=4, posY=2),
        image='chemin/vers/image_food_shop.png'  # Remplacez par le chemin réel de l'image
    )
    bread = Item.objects.create(
        name='Loaf of Enchanted Bread',
        item_type='Food',
        description='Restores a small amount of health and boosts energy.',
        stats={'healing': 5, 'energy': 10},
        image='chemin/vers/image_enchanted_bread.png'  # Remplacez par le chemin réel de l'image
    )
    ShopItem.objects.create(shop=food_shop, item=bread, price=5)

    # Magasin de manuscrits
    manuscript_shop = Shop.objects.create(
        name='Arcane Archives',
        tile=Tile.objects.get(link_world=world4, posX=2, posY=1),
        image='chemin/vers/image_manuscript_shop.png'  # Remplacez par le chemin réel de l'image
    )
    scroll = Item.objects.create(
        name='Scroll of Knowledge',
        item_type='Manuscript',
        description='Contains ancient wisdom. Can be used to learn new skills.',
        stats={'knowledge': 10},
        image='chemin/vers/image_scroll_knowledge.png'  # Remplacez par le chemin réel de l'image
    )
    ShopItem.objects.create(shop=manuscript_shop, item=scroll, price=50)

    # Create the Enchanted Treasure Chest
    enchanted_chest = Chest.objects.create(
        name='Chest of Wonders',
        tile=Tile.objects.get(link_world=world1, posX=0, posY=2),
        image='path/to/enchanted_chest_image.png'  # Replace with the actual image path
    )

    # Add items to the chest
    golden_amulet = Item.objects.create(
        name='Golden Amulet',
        item_type='Equipment',
        description='Enhances magical abilities.',
        stats={'magic_power': 20},
        image='path/to/golden_amulet_image.png'
    )
    starlight_gem = Item.objects.create(
        name='Starlight Gem',
        item_type='Gem',
        description='Radiant gemstone that glows softly.',
        stats={'light_radius': 10},
        image='path/to/starlight_gem_image.png'
    )
    scroll_of_wisdom = Item.objects.create(
        name='Scroll of Ancient Wisdom',
        item_type='Manuscript',
        description='Reveals forgotten spells and arcane knowledge.',
        stats={'knowledge': 15},
        image='path/to/scroll_of_wisdom_image.png'
    )

    # Create the Dragon's Hoard Chest
    dragons_hoard = Chest.objects.create(
        name="Dragon's Chest",
        tile=Tile.objects.get(link_world=world2, posX=1, posY=3),
        image='path/to/dragons_hoard_image.png'  # Replace with the actual image path
    )

    # Add items to the chest
    dragon_scale_armor = Item.objects.create(
        name='Dragon Scale Armor',
        item_type='Equipment',
        description='Exceptional protection crafted from dragon scales.',
        stats={'armor': 30},
        image='path/to/dragon_scale_armor_image.png'
    )
    flameforged_sword = Item.objects.create(
        name='Flameforged Sword',
        item_type='Weapon',
        description='Imbued with dragonfire, cuts through steel.',
        stats={'damage': 25},
        image='path/to/flameforged_sword_image.png'
    )
    ruby_of_dragon_breath = Item.objects.create(
        name="Ruby of Dragon's Breath",
        item_type='Gem',
        description='Grants fire-based abilities.',
        stats={'fire_damage': 20},
        image='path/to/ruby_of_dragon_breath_image.png'
    )

    # Associate items with the chest
    ChestItem.objects.create(chest=dragons_hoard, item=dragon_scale_armor)
    ChestItem.objects.create(chest=dragons_hoard, item=flameforged_sword)
    ChestItem.objects.create(chest=dragons_hoard, item=ruby_of_dragon_breath)

    # Associate items with the chest
    ChestItem.objects.create(chest=enchanted_chest, item=golden_amulet)
    ChestItem.objects.create(chest=enchanted_chest, item=starlight_gem)
    ChestItem.objects.create(chest=enchanted_chest, item=scroll_of_wisdom)



class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(add_initial_data),
    ]